"""
Servicio de autenticaci√≥n para SharePoint Online usando OAuth2.
Gestiona tokens de acceso de Azure AD para Microsoft Graph API.
"""

import logging
import aiohttp
from typing import Dict, Any
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class SharePointAuthService:
    """
    Servicio de autenticaci√≥n para SharePoint Online usando client credentials flow.
    
    Gestiona la obtenci√≥n autom√°tica de tokens de Azure AD y su cach√© en memoria
    para evitar solicitudes innecesarias al endpoint de autenticaci√≥n.
    """
    
    def __init__(self):
        """Inicializa el servicio de autenticaci√≥n SharePoint."""
        from app.core.config import settings
        
        # Cache simple de token en memoria
        self._token_cache: Dict[str, Any] = {
            "access_token": None,
            "expires_at": 0,  # epoch seconds
        }
        
        # Configuraci√≥n de Azure AD desde variables de entorno
        # Primero intenta usar variables espec√≠ficas de SharePoint, sino usa las generales
        self.tenant_id = getattr(settings, 'sharepoint_tenant_id', None) or getattr(settings, 'azure_tenant_id', None)
        self.client_id = getattr(settings, 'sharepoint_client_id', None) or getattr(settings, 'azure_client_id', None)
        self.client_secret = getattr(settings, 'sharepoint_client_secret', None) or getattr(settings, 'azure_client_secret', None)
        
        if not all([self.tenant_id, self.client_id, self.client_secret]):
            logger.warning("‚ö†Ô∏è Configuraci√≥n de SharePoint incompleta. Algunos endpoints no funcionar√°n.")
        
        # URLs de autenticaci√≥n
        self.token_url = f"https://login.microsoftonline.com/{self.tenant_id}/oauth2/v2.0/token"
        # Scope para Microsoft Graph API (SharePoint Online)
        self.oauth_scope = "https://graph.microsoft.com/.default"
    
    @property
    def is_configured(self) -> bool:
        """Verifica si el servicio est√° completamente configurado."""
        return all([self.tenant_id, self.client_id, self.client_secret])
    
    async def get_access_token(self) -> str:
        """
        Obtiene un token de acceso v√°lido de Azure AD.
        Usa cach√© interno para evitar solicitudes innecesarias.
        
        Returns:
            str: Access token v√°lido
            
        Raises:
            Exception: Si falla la autenticaci√≥n con Azure AD
        """
        # Verificar configuraci√≥n
        if not self.is_configured:
            raise Exception("Servicio de SharePoint no est√° configurado. Verifica variables de entorno.")
        
        # Verificar si hay token en cach√© y no ha expirado
        now = datetime.utcnow().timestamp()
        
        if self._token_cache["access_token"] and self._token_cache["expires_at"] > now:
            expires_in = int(self._token_cache["expires_at"] - now)
            logger.debug(f"üîë Usando token de SharePoint desde cach√© (expira en {expires_in}s)")
            return self._token_cache["access_token"]
        
        # Obtener nuevo token
        logger.info("üîÑ Obteniendo nuevo token de acceso para SharePoint desde Azure AD...")
        
        token_data = {
            "grant_type": "client_credentials",
            "client_id": self.client_id,
            "client_secret": self.client_secret,
            "scope": self.oauth_scope
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(self.token_url, data=token_data) as response:
                if response.status != 200:
                    error_detail = await response.text()
                    logger.error(f"‚ùå Error obteniendo token de SharePoint: {response.status} - {error_detail}")
                    raise Exception(f"Error de autenticaci√≥n con Azure AD: {response.status}")
                
                token_response = await response.json()
                access_token = token_response.get("access_token")
                expires_in = token_response.get("expires_in", 3600)
            
            # Almacenar en cach√© con 5 minutos de margen antes de expiraci√≥n
            expires_at = (datetime.utcnow() + timedelta(seconds=expires_in - 300)).timestamp()
            
            self._token_cache["access_token"] = access_token
            self._token_cache["expires_at"] = expires_at
            
            logger.info(f"‚úÖ Token de SharePoint obtenido exitosamente (v√°lido por {expires_in}s)")
            
            return access_token
    
    def get_token_info(self) -> Dict[str, Any]:
        """
        Obtiene informaci√≥n sobre el token en cach√©.
        
        Returns:
            dict: Informaci√≥n del token (expires_at, expires_in_seconds, is_valid)
        """
        now = datetime.utcnow().timestamp()
        expires_at = datetime.fromtimestamp(self._token_cache["expires_at"]).isoformat() if self._token_cache["expires_at"] else None
        expires_in = int(self._token_cache["expires_at"] - now) if self._token_cache["expires_at"] > now else 0
        
        return {
            "has_token": bool(self._token_cache["access_token"]),
            "expires_at": expires_at,
            "expires_in_seconds": expires_in,
            "is_valid": self._token_cache["expires_at"] > now if self._token_cache["access_token"] else False
        }
    
    def clear_token_cache(self):
        """Limpia el cach√© de token (√∫til para testing o troubleshooting)."""
        logger.info("üóëÔ∏è Limpiando cach√© de token de SharePoint")
        self._token_cache = {
            "access_token": None,
            "expires_at": 0,
        }


# Instancia global del servicio
sharepoint_auth_service = SharePointAuthService()
