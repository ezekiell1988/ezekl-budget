name: Deploy to Azure Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_NAME: ezekl-budget
  DEPLOY_PORT: 8001

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Azure Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Configurar variables
          PROJECT_NAME="${{ env.PROJECT_NAME }}"
          DEPLOY_PORT="${{ env.DEPLOY_PORT }}"
          PROJECT_PATH="/home/azureuser/projects/$PROJECT_NAME"
          
          echo "üöÄ Iniciando deployment de $PROJECT_NAME en puerto $DEPLOY_PORT"
          
          # Crear directorio base si no existe
          mkdir -p /home/azureuser/projects
          
          # Clonar o actualizar repositorio
          if [ -d "$PROJECT_PATH" ]; then
            echo "üìÅ Actualizando repositorio existente..."
            cd $PROJECT_PATH
            git fetch origin
            git reset --hard origin/main
          else
            echo "üì• Clonando repositorio..."
            cd /home/azureuser/projects
            git clone https://github.com/${{ github.repository }}.git $PROJECT_NAME
            cd $PROJECT_PATH
          fi
          
          # Crear archivo .env si no existe
          if [ ! -f .env ]; then
            echo "üìù Creando archivo .env..."
            cat > .env << EOF
          AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
          AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
          PORT=$DEPLOY_PORT
          EOF
          fi
          
          # Detener contenedor anterior si existe
          echo "üõë Deteniendo contenedor anterior..."
          docker stop $PROJECT_NAME || true
          docker rm $PROJECT_NAME || true
          
          # Limpiar im√°genes antiguas
          echo "üßπ Limpiando im√°genes antiguas..."
          docker image prune -f
          
          # Verificar si Node.js est√° instalado, si no, instalarlo
          echo "üì¶ Verificando Node.js..."
          if ! command -v node &> /dev/null; then
            echo "üì• Instalando Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Verificar si Ionic CLI est√° instalado globalmente
          if ! command -v ionic &> /dev/null; then
            echo "üì• Instalando Ionic CLI..."
            sudo npm install -g @ionic/cli
          fi
          
          # Navegar al proyecto Ionic y construir
          echo "üî® Construyendo frontend Ionic..."
          cd ezekl-budget-ionic
          npm ci
          ionic build --prod
          cd ..
          
          # Construir y ejecutar nuevo contenedor Python
          echo "üî® Construyendo imagen Docker para FastAPI..."
          docker build -t $PROJECT_NAME .
          
          echo "‚ñ∂Ô∏è  Ejecutando contenedor en puerto $DEPLOY_PORT..."
          docker run -d \
            --name $PROJECT_NAME \
            --restart unless-stopped \
            -p $DEPLOY_PORT:$DEPLOY_PORT \
            --env-file .env \
            $PROJECT_NAME
          
          # Verificar que el contenedor est√© corriendo
          echo "‚úÖ Verificando deployment..."
          sleep 10
          
          if docker ps | grep -q $PROJECT_NAME; then
            echo "üéâ Deployment exitoso! $PROJECT_NAME corriendo en puerto $DEPLOY_PORT"
            echo "üåê Accede en: http://20.246.83.239:$DEPLOY_PORT"
          else
            echo "‚ùå Error en deployment"
            docker logs $PROJECT_NAME
            exit 1
          fi
          
          # Mostrar estado final
          echo "üìä Contenedores activos:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"